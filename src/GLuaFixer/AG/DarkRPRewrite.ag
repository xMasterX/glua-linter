{-# LANGUAGE ParallelListComp #-}
module {GLuaFixer.AG.DarkRPRewrite}{}{}



imports
{
import GLua.AG.AST
import GLua.TokenTypes
import Data.List
import Control.Monad (guard)
}
include "../../GLua/AG/AST.ag"

{

-- All rewrites
rewriteNames :: [String]
rewriteNames = [
    "AddExtraTeam",
    "AddCustomShipment",
    "AddCustomVehicle",
    "AddEntity"
    ]

rewriteNameTo :: [String]
rewriteNameTo = [
    "createJob",
    "createShipment",
    "createVehicle",
    "createEntity"
    ]

rewriteFuncName :: Int -> [PFExprSuffix] -> PrefixExp
rewriteFuncName i sfs = PFVar (MToken emptyRg (Identifier "DarkRP")) (funcName : sfs)
    where
        fn = rewriteNameTo !! i
        funcName = DotIndex $ MToken emptyRg (Identifier fn)

rewriteParams :: [[String]]
rewriteParams = [
    ["color", "model", "description", "weapons", "command", "max", "salary", "admin", "vote", "hasLicense", "NeedToChangeFrom", "customCheck"],
    ["model", "entity", "price", "amount", "separate", "pricesep", "noship", "allowed", "shipmodel", "customCheck"],
    ["name", "model", "price", "allowed", "customCheck"],
    ["entity", "model", "price", "max", "command", "allowed", "customCheck"]
    ]

-- Decides whether old syntax is used.
isOldSyntax :: MToken -> Maybe Int
isOldSyntax (MToken _ (Identifier s)) = elemIndex s rewriteNames
isOldSyntax _ = Nothing

-- Extract the name of an identifier MToken
identifierName :: MToken -> String
identifierName (MToken _ (Identifier s)) = s
identifierName (MToken _ _) = error "has no identifier"

-- Converts syntax of jobs, shipments and entities.
-- Vehicles don't have the name as first parameter, so they're handled separately
convertSyntax :: Int -> [MExpr] -> Args
convertSyntax _ [] = ListArgs []
convertSyntax i (name : args) = ListArgs (name : [MExpr emptyRg tbl])
    where
        tbl :: Expr
        tbl = ATableConstructor [NamedField (MToken emptyRg (Identifier k)) v | (k, v) <- zip (rewriteParams !! i) args]
}

attr AllStuff
    syn repl :: self
    syn copy :: self

attr PFExprSuffix Args ExprSuffixList
    syn args use {++} {[]} :: {[MExpr]}
    inh shouldReplace :: {Maybe Int}
    inh customItemKind :: String

attr MExprList PFExprSuffix ExprSuffixList Args
    syn count use {+} {0} :: Int

attr PFExprSuffix ExprSuffixList
    syn isFunctionCall use {||} {False} :: Bool

sem MExprList
    | Cons
        lhs.count = @tl.count + 1
    | Nil
        lhs.count = 0

sem PrefixExp
    | PFVar
        loc.isOld = guard @suffixes.isFunctionCall >> isOldSyntax @name
        loc.shouldReplace = @suffixes.count > 2
        lhs.repl = case @loc.isOld of
                        Nothing -> PFVar @name @suffixes.repl
                        Just i -> if @loc.shouldReplace then
                                     rewriteFuncName i @suffixes.repl
                                   else
                                     rewriteFuncName i @suffixes.copy
        suffixes.customItemKind = identifierName @name
        suffixes.shouldReplace = @loc.isOld
    | ExprVar
        suffixes.shouldReplace = Nothing
        suffixes.customItemKind = ""


sem Args
    | ListArgs
        lhs.repl = case @lhs.shouldReplace of
                        Nothing -> ListArgs @args.repl
                        Just i  -> if @lhs.customItemKind == "AddCustomVehicle" then
                                    TableArg [NamedField (MToken emptyRg (Identifier k)) v | (k, v) <- zip (rewriteParams !! i) @args.repl]
                                   else
                                    convertSyntax i @args.repl

sem ExprSuffixList
    | Cons
        lhs.isFunctionCall = @hd.isFunctionCall -- Just need the first PFExprSuffix

sem PFExprSuffix
    | Call
        lhs.isFunctionCall = True
    -- Don't set isFunctionCall for MetaCall, since it's only about the
    -- functions in rewriteNames

{
fixOldDarkRPSyntax :: AST -> AST
fixOldDarkRPSyntax p = repl_Syn_AST (wrap_AST (sem_AST p) Inh_AST)
}
